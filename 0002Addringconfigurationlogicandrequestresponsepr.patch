From a3b2b824c38aa0f8e35d02189563f925758a24ee Mon Sep 17 00:00:00 2001
From: Peter Dinda <pdinda@northwestern.edu>
Date: Sun, 28 Feb 2016 10:22:08 -0600
Subject: [PATCH 2/2] Add ring configuration logic and request/response
 processing

---
 include/dev/virtio_pci.h  |  11 ++++
 include/dev/virtio_ring.h |   8 +--
 src/dev/virtio_pci.c      | 165 +++++++++++++++++++++++++++++++++++++++++++---
 3 files changed, 172 insertions(+), 12 deletions(-)

diff --git a/include/dev/virtio_pci.h b/include/dev/virtio_pci.h
index 45665f8..927edcc 100644
--- a/include/dev/virtio_pci.h
+++ b/include/dev/virtio_pci.h
@@ -1,14 +1,25 @@
 #ifndef __VIRTIO_PCI
 #define __VIRTIO_PCI
 
+#include <dev/virtio_ring.h>
+
 #define MAX_VRINGS 4
 
 enum virtio_pci_dev_type { VIRTIO_PCI_NET, VIRTIO_PCI_BLOCK, VIRTIO_PCI_OTHER };
 
 struct virtio_pci_vring {
   uint64_t size_bytes;
+  // pointer to unaligned address supplied by nautilus
+  // for memory management later (free)
   uint8_t *data ;
+  // aligned start of vring within data
   uint8_t *aligned_data;
+
+  // compatability with support code supplied in virtio docs
+  // the pointers here go into aligned_data
+  struct virtq vq;
+  // for processing respones 
+  unsigned int last_seen_used;
 };
 
 struct virtio_pci_dev {
diff --git a/include/dev/virtio_ring.h b/include/dev/virtio_ring.h
index 84a4b0a..1632795 100644
--- a/include/dev/virtio_ring.h
+++ b/include/dev/virtio_ring.h
@@ -76,14 +76,14 @@ struct virtq_desc {
         le16 flags;
         /* We chain unused descriptors via this, too */
         le16 next;
-} ;
+} __packed ;
 
 struct virtq_avail {
         le16 flags;
         le16 idx;
         le16 ring[];
         /* Only if VIRTIO_F_EVENT_IDX: le16 used_event; */
-} ;
+} __packed ;
 
 /* le32 is used here for ids for padding reasons. */
 struct virtq_used_elem {
@@ -91,14 +91,14 @@ struct virtq_used_elem {
         le32 id;
         /* Total length of the descriptor chain which was written to. */
         le32 len;
-} ;
+} __packed ;
 
 struct virtq_used {
         le16 flags;
         le16 idx;
         struct virtq_used_elem ring[];
         /* Only if VIRTIO_F_EVENT_IDX: le16 avail_event; */
-} ;
+} __packed;
 
 struct virtq {
         unsigned int num;
diff --git a/src/dev/virtio_pci.c b/src/dev/virtio_pci.c
index 02d283d..969c273 100644
--- a/src/dev/virtio_pci.c
+++ b/src/dev/virtio_pci.c
@@ -255,6 +255,14 @@ static int discover_devices(struct pci_info *pci)
 
 	}
 
+	// Now we need to figure out its interrupt
+	if (pci_cfg_has_capability(bus->num,pdev->num,0,PCI_CAP_ID_MSIX)) { 
+	  DEBUG("device supports MSI-X\n");
+	} else {
+	  DEBUG("device does not support MSI-X\n");
+	}
+	
+
 	INFO("Adding virtio %s device with name %s : bus=%u dev=%u func=%u: pci_intr=%u intr_vec=%u ioport_start=%p ioport_end=%p mem_start=%p mem_end=%p\n",
 	     vdev->type==VIRTIO_PCI_BLOCK ? "block" :
 	     vdev->type==VIRTIO_PCI_NET ? "net" : "other",
@@ -289,7 +297,8 @@ static inline unsigned compute_size(unsigned int qsz)
 int virtio_ring_init(struct virtio_pci_dev *dev)
 {
   uint16_t i;
-  uint64_t size;
+  uint64_t qsz;
+  uint64_t qsz_numbytes;
   uint64_t alloc_size;
   
 
@@ -299,18 +308,18 @@ int virtio_ring_init(struct virtio_pci_dev *dev)
   dev->num_vrings=0;
   for (i=0;i<MAX_VRINGS;i++) {
     write_regw(dev,QUEUE_SEL,i);
-    size = read_regw(dev,QUEUE_SIZE);
-    if (size==0) {
+    qsz = read_regw(dev,QUEUE_SIZE);
+    if (qsz==0) {
       // out of queues to support
       break;
     }
-    INFO("Ring %u has uncooked size 0x%lx\n", i, size);
-    size = compute_size(size);
-    INFO("Ring %u has cooked size 0x%lx bytes\n", i, size);
+    INFO("Ring %u has 0x%lx slots\n", i, qsz);
+    qsz_numbytes = compute_size(qsz);
+    INFO("Ring %u has size 0x%lx bytes\n", i, qsz_numbytes);
 
 
-    dev->vring[i].size_bytes = size;
-    alloc_size = 4096 * (NUM_PAGES(size) + 1);
+    dev->vring[i].size_bytes = qsz_numbytes;
+    alloc_size = 4096 * (NUM_PAGES(qsz_numbytes) + 1);
 
     if (!(dev->vring[i].data = malloc(alloc_size))) {
       ERROR("Cannot allocate ring\n");
@@ -320,6 +329,25 @@ int virtio_ring_init(struct virtio_pci_dev *dev)
     memset(dev->vring[i].data,0,alloc_size);
 
     dev->vring[i].aligned_data = (uint8_t *)ALIGN((uint64_t)(dev->vring[i].data));
+    dev->vring[i].vq.num = qsz;
+
+    dev->vring[i].vq.desc = (struct virtq_desc *) (dev->vring[i].aligned_data);
+
+    dev->vring[i].vq.avail = (struct virtq_avail *) 
+      (dev->vring[i].aligned_data 
+       + sizeof(struct virtq_desc)*qsz);
+
+    dev->vring[i].vq.used = (struct virtq_used *) 
+      (dev->vring[i].aligned_data
+       +  ALIGN(sizeof(struct virtq_desc)*qsz + sizeof(uint16_t)*(3 + qsz))); 
+
+
+    DEBUG("ring allocation at %p for 0x%lx bytes\n", dev->vring[i].data,alloc_size);
+    DEBUG("ring data at %p\n", dev->vring[i].aligned_data);
+    DEBUG("ring num  = 0x%lx\n",dev->vring[i].vq.num);
+    DEBUG("ring desc at %p\n", dev->vring[i].vq.desc);
+    DEBUG("ring avail at %p\n", dev->vring[i].vq.avail);
+    DEBUG("ring used at %p\n", dev->vring[i].vq.used);
     
     // now tell device about the ring
     // note it's a 32 bit register, but the address is a page address
@@ -337,6 +365,127 @@ int virtio_ring_init(struct virtio_pci_dev *dev)
   return 0;
 }
 
+// a descriptor with len 0 will denote
+// it is free
+// we return -1 if the allocation cannot occur
+static uint32_t allocate_descriptor(volatile struct virtq *vq)
+{
+  uint32_t i;
+
+  // this is hideous
+  for (i=0;i<vq->num;i++) { 
+    if (!vq->desc[i].len) { 
+      // set to nonzero sentinal value
+      vq->desc[i].len=0xdeadbeef;
+      DEBUG("Allocate descriptor %u\n",i);
+      return i;
+    }
+  }
+  return -1;
+}
+
+static void free_descriptor(volatile struct virtq *vq, uint32_t i)
+{
+  DEBUG("Free descriptor %u\n",i);
+  if (!vq->desc[i].len) { 
+    DEBUG("Warning: descriptor already appears freed\n");
+  }
+  vq->desc[i].len=0;
+}
+
+// Returns 0 if we are able to place the request
+// into a descriptor and queue it to the avail ring
+// returns nonzero if this fails
+static int virtio_enque_request(struct virtio_pci_dev *dev,
+				uint32_t ring, 
+				uint64_t addr, 
+				uint32_t len, 
+				uint16_t flags)
+{
+  volatile struct virtq *vq = &dev->vring[ring].vq;
+
+  uint32_t i;
+  
+  i = allocate_descriptor(vq);
+  if (i==-1) { 
+    return -1;
+  }
+  
+  vq->desc[i].addr=addr;
+  vq->desc[i].len=len;
+  vq->desc[i].flags=flags;
+  vq->desc[i].next=0;
+  
+  vq->avail->ring[vq->avail->idx % vq->num] = i;
+  __asm__ __volatile__ ("" : : : "memory"); // software memory barrier
+  __sync_synchronize(); // hardware memory barrier
+  vq->avail->idx++; // it is ok that this wraps around
+  __asm__ __volatile__ ("" : : : "memory"); // software memory barrier
+  __sync_synchronize(); // hardware memory barrier
+  
+  return 0;
+}
+
+// Processing outstanding responses
+// calling the callback function for each one.  
+// the arguments to the callback are the elements of 
+// the original corresponding request
+static int virtio_dequeue_responses(struct virtio_pci_dev *dev,
+				    uint32_t ring,
+				    int (*callback)(struct virtio_pci_dev *dev,
+						    uint32_t ring,
+						    uint64_t addr,
+						    uint32_t len,
+						    uint16_t flags))
+{
+  struct virtio_pci_vring *vring = &dev->vring[ring];
+  volatile struct virtq *vq = &vring->vq;
+  uint16_t avail_flags;
+
+  avail_flags = vq->avail->flags;
+
+  // disable interrupts
+  vq->avail->flags |= VIRTQ_AVAIL_F_NO_INTERRUPT;
+
+  while (1) { 
+
+    if (vring->last_seen_used != vq->used->idx ) {
+
+      __asm__ __volatile__ ("" : : : "memory"); // sw mem barrier
+      __sync_synchronize(); // hw mem barrier
+
+      // restore interrupt state to whatever it was previously
+      vq->avail->flags = avail_flags;
+
+      // check again
+      if (vring->last_seen_used != vq->used->idx) {
+	break;
+      }
+    } 
+    
+    struct virtq_used_elem *e = &(vq->used->ring[vring->last_seen_used % vq->num]);
+
+    if (e->len!=1) { 
+      DEBUG("Surprising len %u response\n", e->len);
+    }
+
+    
+    if (callback(dev,
+		 ring,
+		 vq->desc[e->id].addr,
+		 vq->desc[e->id].len,
+		 vq->desc[e->id].flags)) {
+      DEBUG("Surprising nonzero return from callback\n");
+    }
+
+    free_descriptor(vq,e->id);
+
+    vring->last_seen_used++;
+  }
+
+  return 0;
+}
+
 static int virtio_block_init(struct virtio_pci_dev *dev)
 {
 
-- 
1.9.1

